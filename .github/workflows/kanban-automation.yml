name: Kanban Automation

on:
  issues:
    types: [opened, assigned]
  pull_request:
    types: [review_requested, closed]

jobs:
  automate-project-board:
    runs-on: ubuntu-latest
    steps:
      - name: Move new issues to the backlog
        if: github.event_name == 'issues' && github.event.action == 'opened'
         env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          COLUMN_ID=7ee237bb
          
          # Get the node_id of the issue
          NODE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER} | jq -r '.node_id')
          
          # Move the issue to the backlog column
          curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/projects/columns/cards" \
            -d "{\"content_id\": \"${NODE_ID}\", \"content_type\": \"Issue\", \"column_id\": ${COLUMN_ID}}"
        
      - name: Move assigned issues to Todo
      if: github.event_name == 'issues' && github.event.action == 'assigned'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        COLUMN_ID_TODO: f75ad846 
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        # Get the node_id of the issue
        NODE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER} | jq -r '.node_id')
        # Move the issue to the Todo column
        curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/projects/columns/cards" \
          -d "{\"content_id\": \"${NODE_ID}\", \"content_type\": \"Issue\", \"column_id\": $COLUMN_ID_TODO}"

      - name: Move linked issues on review requested
        if: github.event_name == 'pull_request' && github.event.action == 'review_requested'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use GraphQL API to find linked issues
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          ISSUES_LINKED=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -X POST -d '{ "query": "query ($number: Int!, $owner: String!, $repo: String!) { repository(owner:$owner, name:$repo) { pullRequest(number:$number) { closingIssuesReferences(first: 100) { nodes { id } } } } }", "variables": { "number": '$PR_NUMBER', "owner": "'${REPO%/*}'", "repo": "'${REPO#*/}'" } }' \
            https://api.github.com/graphql | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes[].id')
          
          for ISSUE_ID in $ISSUES_LINKED; do
            # Use REST API to move the issue to the in review column
            curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.inertia-preview+json" \
              "https://api.github.com/projects/columns/df73e18b/cards" \
              -d "{\"content_id\": ${ISSUE_ID}, \"content_type\": \"Issue\"}"
          done
        
      - name: Move linked issues on PR close
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use GraphQL API to find linked issues
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          ISSUES_LINKED=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -X POST -d '{ "query": "query ($number: Int!, $owner: String!, $repo: String!) { repository(owner:$owner, name:$repo) { pullRequest(number:$number) { closingIssuesReferences(first: 100) { nodes { id } } } } }", "variables": { "number": '$PR_NUMBER', "owner": "'${REPO%/*}'", "repo": "'${REPO#*/}'" } }' \
            https://api.github.com/graphql | jq -r '.data.repository.pullRequest.closingIssuesReferences.nodes[].id')
          
          for ISSUE_ID in $ISSUES_LINKED; do
            # Use REST API to move the issue to the done column
            curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.inertia-preview+json" \
              "https://api.github.com/projects/columns/98236657/cards" \
              -d "{\"content_id\": ${ISSUE_ID}, \"content_type\": \"Issue\"}"
          done

